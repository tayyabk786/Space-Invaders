import pygame
import sys
import math
import random

# Initialize Pygame
pygame.init()

# Initialize Pygame mixer
pygame.mixer.init()

# Variables
WIDTH, HEIGHT = 800, 600
MENU_FONT = pygame.font.SysFont("comicsansms", 75)
MENU_TITLE_FONT = pygame.font.SysFont("comicsansms", 50)
MENU_NAME_FONT = pygame.font.SysFont("comicsansms", 40)
GREEN = (7, 189, 32)
BACKGROUND = pygame.image.load('MainFolder/images/backg.png')
GRAY = (169, 169, 169)

# Create the Pygame window and set the app name at the top
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Alien Invaders")

# Define the main menu options
menu_options = ["Start Game", "Settings", "Exit"]
selected_option = None

# Load and play the soundtrack
pygame.mixer.music.load('MainFolder/sounds/music.mp3')
pygame.mixer.music.set_volume(0.5)
pygame.mixer.music.play(-1)

# Volume control
volume_step = 0.1

# Function to draw the main menu
def draw_menu():
    screen.blit(BACKGROUND, (0,0))
    title_text = MENU_TITLE_FONT.render("ALIEN INVADERS", True, GREEN)
    title_name = MENU_NAME_FONT.render("By Hamza & Tayyab", True, GREEN)

    screen.blit(title_text, (WIDTH // 5 - title_text.get_width() // 100, 17))
    screen.blit(title_name, (WIDTH // 4 - title_name.get_width() // 600, 90))

    for i, option in enumerate(menu_options):
        text = MENU_FONT.render(option, True, GREEN if selected_option == i else GRAY)
        text_rect = text.get_rect(center=(WIDTH // 2, 250 + i * 100))
        screen.blit(text, text_rect)

# Function to handle the game
def game():
    running = True

    # Game variables
    playerImg = pygame.image.load("MainFolder/images/spaceship.png")
    playerX = 370
    playerY = 480
    playerX_change = 0

    enemyImg = []
    enemyX = []
    enemyY = []
    enemyX_change = []
    enemyY_change = []
    num_of_enemies = 7

    for h in range(num_of_enemies):
        enemyImg.append(pygame.image.load("MainFolder/images/alien-2.png"))
        enemyX.append(random.randint(0, 735))
        enemyY.append(random.randint(50, 150))
        enemyX_change.append(3)
        enemyY_change.append(40)

    bulletImg = pygame.image.load("MainFolder/images/bullet-4.png")
    bulletX = 0
    bulletY = 480
    bulletX_change = 0
    bulletY_change = 5
    bullet_state = "ready"

    score = 0

    def player(x, y):
        screen.blit(playerImg, (x, y))

    def enemy(x, y, h):
        screen.blit(enemyImg[h], (x, y))

    def fire_bullet(x, y):
        nonlocal bullet_state
        bullet_state = "fire"
        screen.blit(bulletImg, (x + 16, y + 10))

    def isCollision(enemyX, enemyY, bulletX, bulletY):
        distance = math.sqrt((math.pow(enemyX - bulletX, 2)) + (math.pow(enemyY - bulletY, 2))
        if distance < 27:
            return True
        else:
            return False

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    playerX_change = -5
                if event.key == pygame.K_RIGHT:
                    playerX_change = 5
                if event.key == pygame.K_SPACE:
                    if bullet_state == "ready":
                        bulletX = playerX
                        fire_bullet(bulletX, bulletY)

            if event.type == pygame.KEYUP:
                if event.key == pygame.K_RIGHT or event.key == pygame.K_LEFT:
                    playerX_change = 0

        playerX += playerX_change
        if playerX <= 0:
            playerX = 0
        elif playerX >= 733:
            playerX = 733

        for h in range(num_of_enemies):
            enemyX[h] += enemyX_change[h]
            if enemyX[h] <= 0 or enemyX[h] >= 736:
                enemyX_change[h] = -enemyX_change[h]
                enemyY[h] += enemyY_change[h]

            collision = isCollision(enemyX[h], enemyY[h], bulletX, bulletY)
            if collision:
                bulletY = 480
                bullet_state = "ready"
                score += 1
                print(score)
                enemyX[h] = random.randint(0, 735)
                enemyY[h] = random.randint(50, 150)

        screen.fill((32, 32, 32))
        screen.blit(BACKGROUND, (0, 0))

        player(playerX, playerY)
        for h in range(num_of_enemies):
            enemy(enemyX[h], enemyY[h], h)

        if bulletY <= 0:
            bulletY = 480
            bullet_state = "ready"

        if bullet_state == "fire":
            fire_bullet(bulletX, bulletY)
            bulletY -= bulletY_change

        pygame.display.update()

# Function to handle the main menu
def main_menu():
    global selected_option
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEMOTION:
                mouse_x, mouse_y = event.pos
                for i, option in enumerate(menu_options):
                    text_rect = MENU_FONT.render(option, True, GREEN).get_rect(center=(WIDTH // 2, 300 + i * 60))
                    if text_rect.collidepoint(mouse_x, mouse_y):
                        selected_option = i
                        break
                else:
                    selected_option = None
            if event.type == pygame.MOUSEBUTTONDOWN and selected_option is not None:
                if selected_option == 0:
                    game()
                elif selected_option == 1:
                    settings_menu()
                elif selected_option == 2:
                    pygame.quit()

        draw_menu()
        pygame.display.flip()

# Function to handle settings
def settings_menu():
    global volume
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    pygame.mixer.music.set_volume(min(1.0, pygame.mixer.music.get_volume() + volume_step))
                elif event.key == pygame.K_DOWN:
                    pygame.mixer.music.set_volume(max(0.0, pygame.mixer.music.get_volume() - volume_step))
                elif event.key == pygame.K_ESCAPE:
                    running = False

        screen.blit(BACKGROUND, (0, 0))
        title_text = MENU_TITLE_FONT.render("Settings", True, GREEN)
        volume_text = MENU_FONT.render(f"Volume: {int(pygame.mixer.music.get_volume() * 100)}%", True, GREEN)
        
        screen.blit(title_text, (WIDTH // 2 - title_text.get_width() // 2, 100))
        screen.blit(volume_text, (WIDTH // 2 - volume_text.get_width() // 2, 250))
        
        pygame.display.flip()

if __name__ == "__main__":
    main_menu()
